
    1：vue-cli 会自动建立本地仓库，所以直接将创建的代码 提交到远程仓库即可

    2：修改 根组件APP.vue + route/index.js

    3: 删除默认示例文件：
        • src/views/About.vue                  •src/views/Home.vue
        • src/components/HelloWorld.vue        • src/assets/logo.png
    
    4：创建以下新文件夹： 
        • src/api 目录，存储 前后端接口 封装。
        • src/utils 目录，存储一些工具模块：如 时间处理 + axios请求
        • src/styles 目录，存储 样式资源
        • src/styles/index.less 文件，存储全局样式
        • 在 main.js 中加载全局样式 import './styles/index.less'
    
    5：导入 vant 移动端组件库 ：vant官方文档-->快速上手-->此项目采用 在main.js 全局导入 vant 全部组件
            import Vue from 'vue';
            import Vant from 'vant';
            import 'vant/lib/index.css';
            Vue.use(Vant);
    
    6：使用 lib-flexible(淘宝开发) 动态设置 REM 基准值（html 标签的字体大小）
        ①安装依赖：npm i amfe-flexible
        ②然后在 main.js 中加载执行该模块：import 'amfe-flexible'

       最后发现：在浏览器中切换不同的手机设备尺寸，观察 html 标签 font-size 一直自动适配改变。

    7：使用 postcss-pxtorem 将 px 转为 rem 完成自适应 (只有行内样式长度无法转换)
        ①安装依赖：npm install postcss-pxtorem -D
        ②然后在项目根目录中创建 postcss.config.js 文件：粘贴如下代码
            module.exports = {
                plugins: {
                  'autoprefixer': {
                    browsers: ['Android >= 4.0', 'iOS >= 8']
                  },
                  'postcss-pxtorem': {
                    rootValue: 37.5,
                    propList: ['*']
                  }
                }
            }
        ③配置完毕，重新启动服务。(在项目根目录ctrl+c-->npm run serve)最后测试：刷新页面，审查元素样式查看是否已将 px 转换为 rem。

    
    8:导入 阿里巴巴iconfont 字体图标库：
        ①登录 https://www.iconfont.cn/-->创建项目-->上传图标到项目中-->将图标资源导入到项目中-->在项目中创建 src/styles/icon.less 并写入上面复制到的代码
        
        ②然后在 src/styles/index.less 中加载 icon.less：@import "./icon.less";

        ③最后就是如何使用：使用 i 标签，给两个类名，一个是字体类名 iconfont，一个是图标类名 toutiao-xxx：
            如：手机图标：<i class="iconfont iconshouji"></i>

    9：路由表中的 俩个一级路由渲染到 app.vue 中的路由出口，
       4个二级路由渲染到 父组件的 <router-view>中

    10：如果要 改变 vant 中的样式，而一直在全局样式中加 !important觉得麻烦，可以在main.js文件中先导入vant的 
        css样式文件，再导入全局样式文件。(后者覆盖前者)

    11：Toast 轻提示 使用的话： this.$toast({
                    message:'您已取消退出登录',
                    position:'center'
                })

    12：VueRouter:
            在 methods 中使用进行路由切换：this.$router.push/back('/login')
            在 <template>中使用： $router.push/back('/login')，不需要this

    13：vuex:
        ①使用 state 中数据：this.$store.state.变量名

    14：<template> 中使用 data 中的对象数据 userInfo:{}===> <van-cell :title="userInfo.name">
        文本区：<span> {{userInfo.like_count}} </span>

    15：css 样式作用域问题：
        ①单文件组件的样式 <style lang='less'><style> 默认作用域全局样式，但是如果不希望当前组件中的样式
    影响到别的组件，则 <style lang='less' scope><style>。
        ②如何在有 scope 组件中设置别的组件(第三方库 或者自己写的其他组件文件)的样式：
        首先单文件组件是默认可以作用其他组件的 根节点(第一个div节点)，可以通过审查元素类名作用
    第三方组件的根组件类名设置css，或者添加一个类名。
        第二，深度作用操作符：/deep/,可强行为第三方组件根节点的孩子节点作用 css
    例如：  /deep/ .son { color:red }     (/deep/ === >>> === ::v-deep)
            
    16：home 组件 渲染文章数据内容使用了子组件，使用步骤：
            创建子组件--加载子组件--注册挂载子组件--使用子组件标签--传值子组件渲染(创建-加载-注册-使用-传值渲染)

    17：对文章列表组件 进行固定定位，让他文章展示的内容固定在手机屏幕某处。
        否则: ①下拉文章内容时 上方的 logo搜索框 + 文章频道列表会被覆盖
              ②上拉刷新时看不到最下方 正在更新或者没有更多文章 的提示(被下方四个图标遮盖住了) 

    18：使用 vue tools 开发工具，不显示调试面板中的组件，点击控制台报错：
            Cannot read property ‘VUE_DEVTOOLS_UID’ of undefined

        在 main.js中加入如下代码即可：Vue.config.devtools = true;

    19：绑定图片时：:src="articleItem.cover.images[0]"，不要忘记了 冒号：

    20：使用 Dayjs 第三方插件:
        ①查看官网--安装下载
        ②查看本项目中 utils/dayjs.js 中的相关配置
        ③在 main.js 中导入：import './utils/dayjs'

    21：一些技巧
        ①带条件 动态绑定属性：:class="{ active: index===active }"
        ②在模板中设置了 css 后，设置在了需要设置元素的父元素，需要审查元素，
    设置在其子元素中。 .van-grid-item__text--审查元素找到的
        如：/deep/.active {
                .van-grid-item__text{
                    color: red !important;
                }
            }
        而不能：/deep/.active {
                    color: red !important;
                }

    22：不同模块的不同导入：
            ①导入 axios 请求，文章频道列表------import { getArticlesList } from '@/API/user.js'

            ②导入自己创立的 专门用于显示 文章内容 的组件
            // 并注意在 此组件要注册 子组件 ArticleList
            // ArticleList---此组件 对 子组件的命名，与挂载处名字一致就行
            import ArticleList from './components/article-list'

            ③导入自己封装的函数：import { getItem } from "@/utils/storage.js"

    23：搜索框模块--函数防抖节流：npm i lodash。
        lodash 中有函数专门针对函数 防抖 + 函数节流。(面试一般考手写)
        
        // 导入 lodash,完成 函数防抖 + 函数节流: 一般命名 _ 为 lodash
        import _ from 'lodash'

        // _.debounce 是对一个函数进行防抖处理，并返回处理好的一个函数
        const fn = _.debounce(()=> { 
            console.log('hello'); 
        }, 1000) 

        /* 一连串的 执行函数 但是只会执行一个 hello，
            因为 fn()是经过函数防抖处理的函数，一秒最多执行一次，
            并且每处理一个都会重新计时一秒钟 */
        fn(); 
        // fn(); fn(); fn(); fn(); fn(); fn(); fn(); fn();

        // 这样才会执行第二次，因为他等了 1.2秒
        setTimeout(()=>{
            fn();
        },1200)

    24：封装 axios 请求时，如果只有一个参数就直接加入到 params 中
            如果有多个参数，名称对象，并且只能写 param

        // 搜索联想建议 axios 请求封装
        export const getSearchSuggests = (q) => {
            return request({
                method: 'get',
                url: `/app/v1_0/suggestion`,
                params: {
                    q
                }
            })
        }


        // 搜索结果 axios 请求封装
        // 参数有三个，所以直接当成 一个对象传入
        export const getSearchResults = (params) => {
            return request({
                method: 'get',
                url: `/app/v1_0/search`,
                params
            })
        }

    25：子组件绑定的 传给父组件的函数，必须绑定在父组件中使用子组件 标签处

    26：发布评论，关注作者等等，为防止网速慢导致多次点击：在函数中添加：
         async onSendComment(){
            // 防止多次点击
            this.$toast.loading({
                message:'发布中',
                forbidClick:true //禁止北京点击
            })

            const res = await function()...
         }

    27：如果父组件(定义 commentList:[]) 需要使用 子组件数据 list，如评论数据数组，但是这个数据是在
    子组件 axios 获取的，可以在父组件 传值props 给子组件:
    :list="commentList",这样子组件改变list 值时候，父组件也得到了一样的数据

    28：动态绑定 + 静态绑定
        ①静态绑定，绑定的数据就是字符串
        <van-image src='http......'></>

        ②动态绑定 v-bind:.....,绑定的数据就是 变量
        <van-image :src='article.art_photo'></>

    29:父组件传给 子组件 props 数据，除了 数组 + 对象，都不能直接
    在子组件修改，必须传事件 $emit 给父组件，让父组件修改 

    30：上传新头像使用 裁切功能 使用第三方插件
        ① npm install cropperjs

    31:webSocket 的使用
    ①npm i socket.io-client
    ②在需要用 webSocket的组件中：
        // 加载 socketIo：  import io from 'socket.io-client'
        // 建立连接：       const socket = io('http://ttapi.research.itcast.cn')